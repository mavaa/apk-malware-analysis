import subprocess
import os
import xml.etree.ElementTree as ET
import re

android_ns = "{http://schemas.android.com/apk/res/android}"
name_attr = "{0}name".format(android_ns)

def extract_app(app_path, out_path, apktool_path = None):
    if apktool_path == None:
        apktool_path = "apktool"

    if os.path.exists(out_path):
        os.remove(out_path)

    subprocess.run([apktool_path, "d", "-o", out_path, app_path])

def load_manifest(app_path):
    tree = ET.parse(app_path + "/AndroidManifest.xml")
    return tree.getroot()

def get_number_of_activities(manifest):
    number_of_activities = len(manifest.findall("./application/activity"))

    return number_of_activities

def get_permissions(manifest):
    app_permissions = []

    for permission in manifest.findall("./uses-permission"):
        app_permissions.append(permission.get(name_attr).split(".")[-1])

    return app_permissions

def search_ip_in_files(path):
    return find_regex_in_path_recursive(path, r'[0-9]+(?:\.[0-9]+){3}')

def search_domains_in_files(path):
    return find_regex_in_path_recursive(path, r'http[s]?://\w+\.\w+') # Simple, but not perfect
    # return find_regex_in_path_recursive(path, r'[w]{0,3}[\.]+[a-z0-9\-]+[\.]+[a-z0-9]{0,3}') # Better(?), but false positives

def find_regex_in_path_recursive(path, regex):
    matches = []

    files_in_dir = os.listdir(path)

    for file in os.listdir(path):
        filepath = path + os.sep + file
        if os.path.isfile(filepath):
            # Do search in file

            # First run strings command to gen all strings in file
            result = subprocess.run(["strings", filepath], text = True, capture_output = True)

            # Then check for IP addresses
            for item in re.findall(regex, result.stdout):
                matches.append(item)
        else:
            # Serch recursively in folders
            matches = matches + find_regex_in_path_recursive(filepath, regex)

    # Remove duplicates
    matches = list(dict.fromkeys(matches))
    return matches

