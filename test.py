import apktool.extractor as extractor
import generator.generator as generator
import vtapi.vtapi as vtapi
import sqlite3
import hashlib
import os

# App name and file paths
# package_name = "cn.buding.moviecoupon"
#sha256sum = "d8a7bb9dcfe820023637e24728f0c9e14c3889e931080652b6c2f8d1b5467a40".upper()

# apps = [
#     "cn.buding.moviecoupon",
#     "com.briox.riversip.android.premier.transfers",
#     "com.chaocard.vcard",
#     "com.guoran.rollingpaint",
#     "com.justfree.GunTrigger",
#     "com.mobile17173.game",
#     "com.tixa.enterclient468",
#     "com.wDubLiNW",
#     "io.makeroid.madm20977.Yuvraj_Singh",
#     "the.hexstudios.touchdisable.touchlock"
# ]

apps = os.listdir('downloads/b')
# apps = os.listdir('decoded/t') # testing

for package_name in apps:

    # app = package_name + ".apk"
    app = package_name
    app_path = "downloads/b/" + app # Where to find the apk
    out_path = "decoded/b/" + app # Where to put the extracted folder

    # Extract the apk file (Only needed to run once per app, remove comment if needed)
    # extractor.extract_app(app_path, out_path)

    # Print app name
    print("\n\n\nAPP NAME = " + str(app))
    print()

    # Load the app manifest and apktool file
    manifest = extractor.load_manifest(out_path)
    apktoolfile = extractor.load_apktoolfile(out_path)

    # Search for permissions
    app_permissions = extractor.get_permissions(manifest)
    print("Found " + str(len(app_permissions)) + " permissions:")
    print(app_permissions)
    print()

    # Get the nuber of activities defined
    number_of_activities = extractor.get_number_of_activities(manifest)
    print("Found " + str(number_of_activities) + " activities")
    print()

    # Search for ipv4 addresses
    ipv4s = extractor.search_ip_in_files(out_path)
    print("Found " + str(len(ipv4s)) + " ipv4 addresses:")
    print(ipv4s)
    print()

    # Search for domains
    domains = extractor.search_domains_in_files(out_path)
    print("Found " + str(len(domains)) + " domains:")
    print(domains)
    print()

    # Get number of files
    num_files = extractor.count_files(out_path)
    print("Apk contains " + str(num_files) + " files")
    print()

    # Get cert country code
    country_dial = extractor.get_cert_country(out_path)
    print("Country dial code: " + str(country_dial))
    print()

    # Get sdk version minimum and target
    sdk_version_minimum, sdk_version_target = extractor.get_sdk_versions(apktoolfile)
    print("Minimum SDK version: " + str(sdk_version_minimum))
    print("Target SDK version: " + str(sdk_version_target))
    print()

    # Get file size in bytes
    size_bytes = os.path.getsize(app_path)
    print("App size in bytes: " + str(size_bytes))
    print()

    # Get file sha256 hash
    sha256_hash = hashlib.sha256()
    with open(app_path,"rb") as f:
        # Read and update hash string value in blocks of 4K
        for byte_block in iter(lambda: f.read(4096),b""):
            sha256_hash.update(byte_block)
    print("App sha256 hash: " + str(sha256_hash.hexdigest()))
    print()

    # Write a line to a csv file
    print("Writing to csv...")
    generator.add_csv_line(app_path, out_path, "test.csv", app_permissions, number_of_activities, len(ipv4s), len(domains), num_files, country_dial, sdk_version_minimum, sdk_version_target, size_bytes, sha256_hash.hexdigest())
    print("Finished writing to csv")

    # Get file info from virus total
    # app_info = vtapi.get_vt_info(sha256sum)

    # out_file = open("result.json", "wb")
    # out_file.write(app_info)
    # out_file.close()
